% ЭЛЕКТРОННЫЙ  ЗАДАЧНИК  ПО  ЛОГИЧЕСКОМУ  ПРОГРАММИРОВАНИЮ.
% Версия 1.0 для системы PROLOGUS
%
%                   Copyright (С) 1993  Боголюбов Д.П. (МИЭМ).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%               У Р О К    8
%     Рекурсивная обработка списков.
%               Ч А С Т Ь   4
%         тема: Числовые списки. Сортировка списка.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      
%
% В этой части мы разберем еще одну очень важную 
% программу на Прологе, которая очень часто используется в 
% различных других приложениях.
%
% Эта программа - сортировка списка. Сортировкой называ-
% ется упорядочивание элементов списка по возрастанию ( или
% убыванию ). Например, результатом упорядочивания по возрас-
% танию списка [7,5,1,4] будет список [1,4,5,7].
%
% Один из подходов к этой проблеме состоит в следующем:
% необходимо найти такую перестановку исходного списка, чтобы
% она была упорядоченной.
%
% В связи с этим можем написать

  сортировка(_Список,_УпорСпис):-перестановка(_Список,_УпорСпис),
                                 упорядоченный(_УпорСпис).

% Теперь необходимо определить отношения для перестановки
% и упорядоченного списка.       
%
% Проверка того, что список упорядочен (по возрастанию)
% может быть выражена двумя предложениями:

  упорядоченный([_Элемент]).
  упорядоченный([_Первый,_Второй|_Остальные]):-_Первый =< _Второй,
                              упорядоченный([_Второй|_Остальные]).

% Факт утверждает, что список из одного элемента всегда
% упорядочен. Правило утверждает, что список упорядочен, если первый
% элемент списка не больше второго и остаток списка, начинающийся со
% второго элемента упорядочен.
%
% Один из способов перестановки списка состоит в выделении того
% элемента, который будет первым в переставленном списке и 
% рекурсивной перестановке остатка списка.

  перестановка(_Список,[_Первый|_Остальные]):-
                   выделить(_Первый,_Список,_НовыйСписок),
                   перестановка(_НовыйСписок,_Остальные).
  перестановка([],[]).

% Факт утверждает, что единственная перестановка пустого списка
% совпадает с ним самим.
%
% Последнее, что осталось описать - отношение выделения
% какого-то элемента из списка.

  выделить(_Элемент,[_Элемент|_Остальные],_Остальные).
  выделить(_Элем,[_ДрЭлем|_Спис],[_ДрЭлем|_ДрСпис]):-
                                     выделить(_Элем,_Спис,_ДрСпис).

%      Теперь можно задать вопрос, например, такой:

@    ?-выделить(_К,[1,2,3,4,5],_max).
     ?-сортировка([1,5,7,2],_X).

% Запустите его на выполнение и посмотрите на результат.
% Посмотрите результат работы программы для других списков.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%     Самостоятельное задание
%
% Реализуйте другой подход к сортировке списка - "пузырьком".
% для того, чтобы отсортировать список _Спис необходимо:
% 1) Найти в _Спис два смежных элемента _X и _Y, таких, что
% _X>_Y и поменять их местами, получив тем самым новый
% список _Спис1; затем отсортировать _Спис1.
% 2) Если в _Спис не ни одной пары смежных элементов _X и _Y,
% таких, что _X>_Y, то считать, что _Спис  уже отсортирован.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%     Самостоятельное задание
%
%    Дан список, состоящий из чисел.
% 1) Напишите предикат, находящий минимальный и максимальный
%    элементы списка.
% 2) Напишите предикат, находящий сумму элементов списка.
% 3) Напишите предикат, находящий длину списка.
% 4) Напишите предикат, находящий среднее арифметическое списка.
% 5) Напишите предикат, находящий произведение элементов списка.
% 6) Напишите предикат, находящий номера минимального и
%    максимального элементов списка.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Конец  Урока 8.
%  Загрузите файл  PR9.PRO ( Урок 9 )
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

