% ЭЛЕКТРОННЫЙ  ЗАДАЧНИК  ПО  ЛОГИЧЕСКОМУ  ПРОГРАММИРОВАНИЮ.
% Версия 1.0 для системы PROLOGUS
%
%                   Copyright (С) 1993  Боголюбов Д.П. (МИЭМ).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%               У Р О К    5
%        Базы знаний с рекурсией
%               Ч А С Т Ь   1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Основным методом программирования в Прологе  является
% рекурсия. Рекурсивным определением называется определение
% функции (предиката) через эту же функцию (предикат).
% Рассмотрим простой пример:
%                     

$   песня :- ВЫВОД('бегу,'),песня.
  
$    ?- ВЫВОД('Я '),песня.
 
%    Рассмотрим дерево вывода ответа на этот вопрос:
%
%         ?- ВЫВОД('Я '),песня.
%                 ╔═══════╩══════╗
%         ВЫВОД('бегу,')       песня
%                        ╔═══════╩══════╗
%                ВЫВОД('бегу,')       песня
%                               ╔═══════╩══════╗
%                       ВЫВОД('бегу,')       песня
%                                      ╔═══════╩══════╗
%                              ВЫВОД('бегу,')      . . . .
%     
%
% Как мы видим, в процессе выполнения программы возникает
% бесконечно длинная строка. Это так называемый пример
% бесконечной рекурсии ("зацикливание" программы).
%
% Запустите вопрос, нажав Alt и $, a затем F9, и посмотрите, 
% что из этого выйдет.
%
% Подобные программы не представляют интереса, поскольку в 
% них отсутствует условие выхода. Условием выхода из рекурсии
% обычно является некий факт или правило, при успешном
% выполнении которого программа заканчивает свою работу.
% Рассмотрим следующий вариант известной песни:
% (Нажмите Alt и $, а затем Alt и @).

@ песня(_X) :- _X > 1,ВЫВОД('бегу, '),_Y = ВЫЧ(_X-1),песня(_Y). 
@ песня(1).

@ ?-ВЫВОД('Я '),песня(3),ВЫВОД('бегу по гаревой дорожке').

%    Запустите его (F9), а затем посмотрите на схему.
%
%  ?- ВЫВОД('Я '),песня(3),ВЫВОД('бегу по гаревой дорожке').
%            ┌──────┴───────────────┐
%         песня(Х)                 ─┼─ 
%         песня(3)               песня(1)  
%      ╔═════╩═══════════╗
%  ВЫВОД('бегу,')     песня(3-1)
%                 ┌──────┴──────────────────┐
%              песня(Х)                    ─┼─
%              песня(2)                  песня(1)     
%           ╔═════╩════════════╗
%       ВЫВОД('бегу,')      песня(2-1)
%                       ┌──────┴──────┐
%                      ─┼─            │
%                    песня(Х)      песня(1) 
%                    песня(1)
%
% Пролог, отвечая на вопрос, сопоставляет аргумент вопроса
% 3 с аргументом левой части правила Х. Унификация прошла 
% успешно и производится попытка выполнения подцелей. 

% Поскольку 3>1, то выводится слово 'бегу,'. Подцель истинна.
% Затем ищется такое Y, чтобы его значение было на 1 меньше,
% чем Х, т.е. оно становится равным Y=2. После чего процесс 
% повторяется, но уже с начальным значением не 3, а 2.
% Такой цикл будет продолжаться до тех пор, пока значение 
% аргумента не станет равным единице. После чего первая 
% подцель окажется ложной и будет производится поиск альтернатив,
% в результате чего встретится факт песня(1), который является
% истинным по определению и весь процесс успешно завершится.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Конец  Части 1  Урока 5.
%  Загрузите файл  PR5_2.PRO ( Часть 2 Урока 5 )
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



