% ЭЛЕКТРОННЫЙ  ЗАДАЧНИК  ПО  ЛОГИЧЕСКОМУ  ПРОГРАММИРОВАНИЮ.
% Версия 1.0 для системы PROLOGUS
%
%                   Copyright (С) 1993  Боголюбов Д.П. (МИЭМ).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%               У Р О К    8
%      Рекурсивная обработка списков.
%               Ч А С Т Ь   3
%      тема: Операции над множествами.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Списки являются способом представления множеств на ПРОЛОГе.
% Создадим программы, моделирующие выполнение операций 
% над множествами.
%
% На этом уроке в предыдущих частях мы решили задачу 
% слияния списков - объединения двух множеств. 

   слияние([],_L,_L).
   слияние([_X|_L1],_L2,[_X|_L3]):-слияние(_L1,_L2,_L3).

?-слияние([1,2,8,3],[5,8],_L).

% Этот предикат можно использовать и для разности списков:

?-слияние([1,2,8,3],_L2,[1,2,8,3,5,8]).

% С другой стороны необходимо отметить, что с точки зрения 
% множеств эти операции некорректны, так как результат объединения
% может содержать повторения, а разность  [1,8,2,3] и [2] вычислить
% вообще нельзя.

% Самостоятельное задание. 
%
% Используя определение слияния напишите предикат, находящий:
% 1) последний элемент списка;
% 2) три последних элемента списка.

% Определим предикат, строящий на основе заданного новый список, 
% содержащий элементы, меньшие 10:

выбор([],[]).
выбор([_X|_L],[_X|_L1]):-_X<10,!,выбор(_L,_L1).
выбор([_X|_L],_L1):-выбор(_L,_L1).

% Первое предложение является отражением того факта, что результатом
% выбора из пустого списка всегда будет пустой список.
% Второе предложение описывает случай, когда голова _X
% исходного списка удовлетворяет условию _X<10 результат построения -
% список, составленный из головы - _X и хвоста - нового списка _L1, 
% являющегося результатом выбора элементов <10 из хвоста _L.
% Если голова списка _X>=10, то результатом построения является 
% список из элементов хвоста _L, меньших 10 (список _L1).

% Проверим работу предиката (Alt+@,F9):

@ ?- выбор([17,3,15,5,6,10,18],_New).

% Сохраните текст программы под новым именем.
%
% Самостоятельное задание:
%
% Используя определение предиката выбор, напишите программу, 
% разделяющую исходный список на два: в первом - числа <10, 
% в другом - остальные.

% Условие <10 в определении предиката выбор можно заменить
% на любое другое, например, на условие принадлежности 
% некоторому заданному списку.
% Используем определение предиката принадлежит, описанному
% в первой части урока:

принадлежит(_X,[_X|_L]).
принадлежит(_X,[_Голова|_Хвост]):-принадлежит(_X,_Хвост).

выбор1([],_H,[]).
выбор1([_X|_L],_H,[_X|_L1]):-принадлежит(_X,_H),!,выбор1(_L,_H,_L1).
выбор1([_X|_L],_H,_L1):-выбор1(_L,_H,_L1).

% Проанализируйте программу и определеите, какую операцию 
% над множествами она реализует.

% Самостоятельное задание:
% 
% 1) Напишите программу, объединяющую элементы двух множеств
%    без повторений (в новый список добавляются только те
%    элементы из исходных, которых еще в нем нет).
% 2) Напишите программу, находящую пересечение и разность
%    двух множеств (в один список собираются элементы первого
%    исходного множества, принадлежащие второму, а в другой -
%    все остальные).
% 3) Напишите программу, определяющую, является ли данное 
%    множество подмножеством другого (все элементы первого
%    принадлежат второму. Указание: используйте определение 
%    пересечения множеств).
% 4) Напишите предикат, удаляющий элемент из списка:
%    а) первое вхождение;
%    б) все вхождения.
% 5) Напишите предикат, находящий номер вхождения элемента 
%    в список и элемент по номеру.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Конец  Части 3  Урока 8.
%  Загрузите файл  PR8_4.PRO ( Часть 4 Урока 8 )
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

