% ЭЛЕКТРОННЫЙ  ЗАДАЧНИК  ПО  ЛОГИЧЕСКОМУ  ПРОГРАММИРОВАНИЮ.
% Версия 1.0 для системы PROLOGUS
%
%                   Copyright (С) 1993  Боголюбов Д.П. (МИЭМ).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%               У Р О К    6
%          Рекурсия с накопителями
%              Ч А С Т Ь   2       
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Программа, рассмотренная в Части 1 по числу находила
% его факторал, а можно ли определить, является ли данное
% целое неотрицательное число - факториалом другого числа?
% И какого?
% - К сожалению, используя программу из PR6_1.PRO, НЕТ.
%
% Напишем новую программу для вычисления факториала,
% используя накопители - переменные, в которых накапливаются 
% некоторые значения. В данном случае, в _y - текущее значение
% факториала, а в _m - число, для которого он вычислен.
% Идея метода заключается в прекращении накопления при 
% достижении заданного значения (самого числа или факториала).
% При этом неизвестный параметр унифицируется с значением
% соответствующего накопителя.

% (следующее предложение должно быть закомментировано).  
@  факториал1(_n,_x,_m,_y):-НЕПЕРЕМ(_x),_y>_x,!,ЛОЖЬ.

%  Определение факториала:

   факториал1(_n,_x,_n,_x):- !.
   факториал1(_n,_x,_m,_y):- _m1=ВЫЧ(_m+1),
                             _y1=ВЫЧ(_y*_m1),
                             факториал1(_n,_x,_m1,_y1).

% Начальные значения накопителей должны быть заданы в вызове 
% предиката:

  факториал(_n,_x):-факториал1(_n,_x,0,1).

% Зададим вопрос и проследим последовательность выводов(Alt+&, F9):

&?- ТРАС,факториал(_X,6).

% Получим, что Х=3. Программа выдает верный ответ и для запроса из
% первой части лабораторной работы:
                      
&?- ТРАС,факториал(3,_F).

% Зададим теперь в качестве второго аргумента число, не являющееся
% факториалом (Alt+&, Alt+$, F9).

$?- факториал(_X,7).

% Результат не получен - произошло зацикливание, так как условием выхода
% из рекурсии является равенство одного из накопителей и заданного числа.
% Для устранения недостатка необходимо еще одно условие выхода - когда
% накопленное в _m число первысит заданное _x. Эта ситуация свидетельствует 
% о том, что заданное число - не факториал, т.е. пердикат должен быть 
% неуспешен (в правиле используется ЛОЖЬ), а отсечение(!) не позволяет 
% выбирать альтернативные правила, если произошло превышение.
% Раскомментируйте второе правило выхода (Alt+@) и повторите запрос(F9).

% Таким образом, данная программа решает две задачи: 
% нахождение по заданному числу факториала и обртную -
% определение, является ли данное число факториалом и
% если да - то какого.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Самостоятельное задание
%
% Напишите программу вычисления чисел Фибонначи и номера
% числа Фибонначи с накопителями.
%
% Указания:
% Требуется три накопителя - текущий номер, само число Фибонначи
% и предыдущее число последовательности.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Конец  Урока 6.
%  Загрузите файл  PR7.PRO ( Урок 7 )
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

