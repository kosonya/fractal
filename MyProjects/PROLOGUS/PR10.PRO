% ЭЛЕКТРОННЫЙ  ЗАДАЧНИК  ПО  ЛОГИЧЕСКОМУ  ПРОГРАММИРОВАНИЮ.
% Версия 1.0 для системы PROLOGUS
%
%                   Copyright (С) 1993  Боголюбов Д.П. (МИЭМ).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%               У Р О К    10
%              Графы. Циклы в графах.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Любой граф можно представить в виде множества вершин и ребер.

% ОПРЕДЕЛЕНИЯ

%     Маршрут - чередующаяся последовательность вершин и ребер 
% такая, что любая пара соседних элементов инцидентна (вершина X 
% и ребро U называются инцидентными, если U={X,Y}).
%     Эйлерова цепь - маршрут, содержащий все ребра графа в 
% точности один раз.
%     Эйлеров цикл - эйлерова цепь, у которой начальная и 
% конечная вершины совпадают.
%     Гамильтонова цепь - маршрут, в котором содержатся все  
% вершины графа ровно один раз.
%     Гамильтонов цикл - гамильтонова цепь, у которой начальная и 
% конечная вершины совпадают.

% Структуру графа удобно задавать отношением "ребро" следующего
% вида: ребро(Имя_ребра, Вершина1, Вершина2).

% Например, структура графа G(неориентированного):
%     1
%   a /\c
% 2 /____\ 3
%  |\ b  /|
% d|e \/f |g
%  |  /\  |
% 4|/____\|5
%     h
%
%
ребро(a,1,2).
ребро(a,2,1).
ребро(b,2,3).
ребро(b,3,2).

%...
%(самостоятельно достройте базу)

% ЗАДАЧА1. Найти эйлерову цепь. 
% Решение. Опишем предикат "найти_путь(Текущая, Пройденные)",
% где первый аргумент - "Текущая" вершина, а второй - список
% "Пройденные", хранящий номера пройденных в процессе поиска 
% ребер.
% Правило1. Если найден путь, длина которого равна общему 
% количеству ребер графа (в случае G восьми), то искомый путь 
% найден и его надо выдать на печать:

найти_путь(_Текущая, _Пройденные):-
                                   длина(_Пройденные,8),
                                   ВЫВОД(_Пройденные).

% (предикат длина - длина списка, написать самостоятельно)
% Правило2. Если остались еще не пройденные ребра (длина
% найденного отрезка пути меньше общего количества ребер),
% то надо взять ребро, исходящее из текущей вершины и не
% принадлежащее списку пройденных, и далее снова искать путь 
% от новой вершины, добавив имя ребра к списку пройденных.

найти_путь(_Текущая, _Пройденные):-
                                   длина(_Пройденные,_N),
                                   _N<8,
                                   ребро(_Ребро,_Текущая, _Новая),
                                   не_принадлежит(_Ребро, _Пройденные).
                                   найти_путь(_Новая, [_Ребро|_Пройденные]).

% (предикат не_принадлежит написать самим). Запрос на поиск эйлеровых цепей,
% начинающихся из вершины _Начальная будет иметь вид:

?-найти_путь(_Начальная,[]).

% ЗАДАЧА2. Модифицируйте программу  для поиска только эйлеровых
% циклов. Проверте работу программы на графе G с удаленным ребром h.

% ЗАДАЧА3. Модифицируйте программу  для поиска гамильтоновых
% цепей. Проверте работу программы на графе G.

% ЗАДАЧА4. Модифицируйте программу  для поиска гамильтоновых
% циклов. Проверте работу программы на графе G с удаленным ребром a.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Конец Урока 10
% Загрузите файл PR11.PRO ( Урок 11 )
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

